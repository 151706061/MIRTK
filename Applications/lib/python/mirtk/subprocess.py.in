##############################################################################
# Medical Image Registration ToolKit (MIRTK)
#
# Copyright 2016 Imperial College London
# Copyright 2016 Andreas Schuh
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##############################################################################

"""
This module can be used to execute the MIRTK command-line tools from an image
processing pipeline script. Its main usage is identical to the actual subprocess
module which is used internally by this mirtk.subprocess module.
"""

from __future__ import absolute_import, unicode_literals

import os
import sys
import subprocess

# ============================================================================
# configuration
# ============================================================================

__dir__ = os.path.dirname(os.path.realpath(__file__))

config      = '@__CONFIG__@'
libexec_dir = os.path.realpath(os.path.join(__dir__, '@LIBEXEC_DIR@'))

if sys.platform.startswith('win'): libexec_ext = ['.exe', '.cmd', '.bat']
else:                              libexec_ext = ['']

# ============================================================================
# command execution
# ============================================================================

# ----------------------------------------------------------------------------
def path(argv, quiet=False):
    """Get full path of MIRTK command executable."""
    if isinstance(argv, basestring): command = argv
    else:                            command = argv[0]
    fpath = None
    for ext in libexec_ext:
        p = os.path.join(libexec_dir, config, command + ext)
        if os.path.isfile(p):
            fpath = p
            break
    if not fpath:
        for ext in libexec_ext:
            p = os.path.join(libexec_dir, command + ext)
            if os.path.isfile(p):
                fpath = p
                break
    if not quiet:
        if not fpath:
            sys.stderr.write('Error: Missing execuable for command: ' + command)
        elif not os.access(fpath, os.X_OK):
            sys.stderr.write('Error: Insufficient permissions to execute command: ' + fpath)
    return fpath

# ----------------------------------------------------------------------------
def _call(argv, verbose=0, execfunc=subprocess.call):
    """Execute MIRTK command."""
    argv[0] = path(argv)
    if not argv[0]: return 1
    if verbose > 0:
        args = []
        for arg in argv:
            if ' ' in arg: arg = '"' + arg + '"'
            args.append(arg)
        print(' '.join(args))
    return execfunc(argv)

# ----------------------------------------------------------------------------
def call(argv, verbose=0):
    """Execute MIRTK command and return exit code."""
    return _call(argv, verbose=verbose, execfunc=subprocess.call)

# ----------------------------------------------------------------------------
def check_call(argv, verbose=0):
    """Execute MIRTK command and throw exception on error."""
    return _call(argv, verbose=verbose, execfunc=subprocess.check_call)

# ----------------------------------------------------------------------------
def check_output(argv, verbose=0):
    """Execute MIRTK command and return its output."""
    return _call(argv, verbose=verbose, execfunc=subprocess.check_output)
