#!/bin/bash

##############################################################################
# Medical Image Registration ToolKit (MIRTK)
#
# Copyright 2013-2015 Imperial College London
# Copyright 2013-2015 Andreas Schuh
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##############################################################################

readonly EXEC_NAME="$(basename "$BASH_SOURCE")"

LIBEXEC_DIR="$(cd "${__DIR__}/@LIBEXEC_DIR@" 2> /dev/null && pwd -P 2> /dev/null)"
[ $? -eq 0 ] || { echo "${EXEC_NAME}: Error: Missing directory: ${__DIR__}/@LIBEXEC_DIR@" 1>&2; exit 1; }
export PATH="${__DIR__}:$LIBEXEC_DIR/MinSizeRel:$LIBEXEC_DIR/Release:$LIBEXEC_DIR/RelWithDebInfo:$LIBEXEC_DIR/Debug:$LIBEXEC_DIR:$PATH"

LIBRARY_PATH=

TBB_LIBRARY_DIR='@TBB_LIBRARY_DIR_CONFIG@'
[ -z "$TBB_LIBRARY_DIR" ] || LIBRARY_PATH="$TBB_LIBRARY_DIR:$LIBRARY_PATH"

VTK_LIBRARY_DIRS=('@VTK_LIBRARY_DIRS_CONFIG@')
if [ ${#VTK_LIBRARY_DIRS[@]} -gt 0 ]; then
  for VTK_LIBRARY_DIR in $VTK_LIBRARY_DIRS; do
    [ -z "$VTK_LIBRARY_DIR" ] || export LIBRARY_PATH="$VTK_LIBRARY_DIR:$LIBRARY_PATH"
  done
fi

export LD_LIBRARY_PATH="$LIBRARY_PATH:$LD_LIBRARY_PATH"
export DYLD_LIBRARY_PATH="$LIBRARY_PATH:$DYLD_LIBRARY_PATH"

# ============================================================================
# help
# ============================================================================

# ----------------------------------------------------------------------------
## @brief Print help.
print_help()
{
  print_synopsis
  echo
  cat - << EOF-DESCRIPTION
Description:
  This executable is a wrapper for the MIRTK commands. The name of the
  command to execute must be given as first argument.
EOF-DESCRIPTION
  echo
  print_options
}

# ----------------------------------------------------------------------------
## @brief Print usage information.
print_usage()
{
  print_synopsis
  echo
  print_options
}

# ----------------------------------------------------------------------------
## @brief Print synopsis, i.e., usage section.
print_synopsis()
{
  cat - << EOF-SYNOPSIS
Usage:
  ${EXEC_NAME} [options] [--] <cmd> [options of command <cmd>]
  ${EXEC_NAME} help <cmd>
  ${EXEC_NAME} [options]
EOF-SYNOPSIS
}

# ----------------------------------------------------------------------------
## @brief Print options.
print_options()
{
    cat - << EOF-OPTIONS
Options:
  <cmd>           MIRTK command to run.
  --help, -h      Print help and exit
  --verbose, -v   Print command-line of MIRTK command.
EOF-OPTIONS
}

# ============================================================================
# pattern matching
# ============================================================================

# ----------------------------------------------------------------------------
## @brief This function implements a more portable way to do pattern matching.
#
# Unfortunately, there are significant differences in the way patterns have
# to be matched when using different shells. This function considers which
# shell is used (at the moment only BASH), and uses the appropriate syntax
# for the pattern matching.
#
# @param [in] value   The string to match against pattern.
# @param [in] pattern The pattern to match.
#
# @returns Whether the given string matches the given pattern.
#
# @retval 0 On match.
# @retval 1 Otherwise.
match()
{
  [ $# -eq 2 ] || return 1

  local value=$1
  local pattern=$2

  if [ -z "${value}" ]; then
    [ -z "${pattern}" ]
  elif [ -z "${pattern}" ]; then
    [ -z "${value}" ]
  else
    if [ -n "${BASH_VERSION_MAJOR}" ]; then
      if [ ${BASH_VERSION_MAJOR} -gt 2 ]; then
        # GNU bash, version 3.00.15(1)-release (x86_64-redhat-linux-gnu)
        # throws an error when a regular expression with groups
        # such as in '^(a|b|c)' is used. Here, quotes are required.
        if [ ${BASH_VERSION_MAJOR} -eq 3 -a ${BASH_VERSION_MINOR} -eq 0 ]; then
            [[ "${value}" =~ "${pattern}" ]]
        # GNU bash, version 3.2.25(1)-release (x86_64-redhat-linux-gnu)
        # works with either quotes or not. However, on Mac OS Snow Leopard,
        # GNU bash, version 3.2.48(1)-release (x86_64-apple-darwin10.0)
        # requires that no quotes are used. The quotes are otherwise
        # considered to be part of the pattern.
        else
            [[ "${value}" =~ ${pattern} ]]
        fi
      else
        echo "${value}" | egrep -q "${pattern}"
      fi
    else
      echo "${value}" | egrep -q "${pattern}"
    fi
  fi
}

# ============================================================================
# execute command
# ============================================================================

# ----------------------------------------------------------------------------
## @brief Run MIRTK command in safe environment.
run()
{
  bin="mirtk-$1"
  shift
  if [ $verbose -gt 0 ]; then
    echo -n "> $bin"
    i=0
    argv=("$@")
    while [ $i -lt ${#argv[@]} ]; do
      if match "${argv[$i]}" ' '; then
        echo -n " \"${argv[$i]}\""
      else
        echo -n " ${argv[$i]}"
      fi
      let i++
    done
    echo
  fi
  ${bin} "$@"
}

# ============================================================================
# options
# ============================================================================

verbose=0

while [ $# -gt 0 ]; do
  case "$1" in
    --) shift; break; ;;
    -h|--help) print_help; exit 0; ;;
    -v|--verbose) let verbose++; ;;
    -*) echo "${EXEC_NAME}: Error: Invalid option $1" 1>&2; exit 1; ;;
    *) break; ;;
  esac
  shift
done

cmd="${1:-help}"
shift

if [[ $cmd == help ]]; then
  if [ -z "$1" ]; then
    print_help
    exit 0
  fi
  run "$1" -h
  exit $?
fi

# ============================================================================
# main
# ============================================================================

if [ $verbose -gt 1 ]; then
  echo
  echo "Host:"
  echo -e "\tName: $(hostname)"
  echo
fi

run ${cmd} "$@"
